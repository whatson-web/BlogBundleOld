<?php

namespace WH\BlogBundle\Model;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends EntityRepository
{

    public function getQuery()
    {

        return $this
            ->createQueryBuilder('Post')
            ->leftJoin('Post.template', 'Template')
            ->leftJoin('Post.page', 'Page')
            ->orderBy('Post.score', 'DESC')
            ->orderBy('Post.created', 'DESC');

    }

    public function get($type = 'all', $options = array(), $admin = false)
    {


        $qb = $this->getQuery();

        if (!$admin) {

            $qb->andWhere('Post.status = :status');
            $qb->setParameter('status', 'published');
        }


        foreach ($options as $key => $value) {

            switch ($key) {

                case 'limit':
                    $qb->setMaxResults($value);
                    break;

                case 'order':
                    $qb->orderBy('Post.created', $value);
                    break;


                case 'template':
                    $qb->andWhere('Post.template = :template');
                    $qb->setParameter('template', $value);

                    break;

                case 'conditions':

                    foreach($value as $k => $v) {

                        if(empty($v)) continue;

                        switch($k) {

                            case 'Search' :

                                $qb->orWhere('Post.body LIKE :search');
                                $qb->orWhere('Post.name LIKE :search');
                                $qb->orWhere('Post.title LIKE :search');
                                $qb->setParameter('search', '%'.$v.'%');

                                break;


                            default :

                                $cond = preg_replace('#\.#', '', $k);
                                $cond = strtolower($cond);


                                $qb->andWhere($k. ' = :'.$cond);
                                $qb->setParameter($cond, $v);

                                break;


                        }



                    }




            }

        }


        switch ($type) {

            case 'query':

                return $qb;

                break;

            case 'all':

                $qb->addSelect('Post')
                    ->addSelect('Template')
                    ->addSelect('Page')
                    ->getQuery();

                return $qb->getResult();

                break;

            case 'one':

                $qb->addSelect('Post')
                    ->addSelect('Template')
                    ->addSelect('Page')
                    ->getQuery();

                return $qb->getOneOrNullResult();

                break;

            case 'paginate':


                $qb->addSelect('Post')
                    ->addSelect('Template')
                    ->addSelect('Page')
                    ->getQuery();


                if (!empty($typeOptions['page'])) {

                    $qb->setFirstResult(($typeOptions['page'] - 1) * $typeOptions['limit']);
                }

                if (!empty($typeOptions['limit'])) {

                    $qb->setMaxResults($typeOptions['limit']);
                }

                return new Paginator($qb, true);

                break;

        }

        return false;

    }
}
